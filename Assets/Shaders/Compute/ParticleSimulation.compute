#pragma kernel UpdateArgs
#pragma kernel Emit
#pragma kernel Simulate
#pragma target 5.0

#define THREAD_COUNT_1D 256

// --- Structs ---
struct Particle 
{ 
    float4 lifetime; 
    float4 velocity; 
    float4 position; 
    float4 color; 
    float4 attributes; 
    uint globalId;        // 全局唯一ID
    uint padding1;        // 内存对齐
    uint padding2;       // 内存对齐
    uint padding3;       // 内存对齐
};

struct Emitter 
{
    float4 position;
    float4 initialVelocity;
    float4 speedMinMax;
    float4 color;
    float4 ratesAndEnabled;
};

// 旧力场/多涡旋结构已移除

// （调试结构已移除）


// --- Buffers ---
RWStructuredBuffer<Particle> _Particles;
RWStructuredBuffer<uint> _DeadPool;
RWStructuredBuffer<uint> _AliveIndices_A;
RWStructuredBuffer<uint> _AliveIndices_B;
RWStructuredBuffer<uint> _Counters;
RWStructuredBuffer<uint> _IndirectArgs;
RWStructuredBuffer<uint> _GlobalIdCounter;  // 全局ID计数器
StructuredBuffer<Emitter> _Emitters;
// （调试缓冲区已移除）

// --- Uniforms ---
float _DeltaTime;
uint _PingPong_A;
uint _PingPong_B;
uint _EmissionCount;
uint _EmitterIndex;
float _MinLifetime;
float _MaxLifetime;
float _Drag;
float3 _Seeds;
float3 _GlobalForce;
bool _ColorOverLife;
bool _VelocityToColor;
float _MaxSpeedForColor;

// Galactic Disk uniforms
bool _GalacticDiskEnabled;
float _DiskRadius;
float _DiskHalfThickness;
float _CenterGravity;
float _PlaneDamping;
float _FlatRotationSpeed;
float _RotationScaleRadius;
int _SpiralArms;
float _SpiralTightness; // b
float _SpiralForce;
float _TangentialAlign;
// Radial color mapping
bool _RadialColorEnabled;
float3 _CoreColor;
float3 _MidColor;
float3 _OuterColor;
// Edge centrifugal drift
float _EdgeOutflowStrength;
float _EdgeOutflowExponent;

// --- Utility Functions ---
float rand(float2 co) 
{ 
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453); 
}

float3 SafeNormalize(float3 v) 
{ 
    float l = length(v); 
    if (l > 0.00001) 
    { 
        return v / l; 
    } 
    return float3(0, 1, 0); 
}

// --- Noise Functions ---
float3 mod289(float3 x) 
{ 
    return x - floor(x * (1.0 / 289.0)) * 289.0; 
}

float4 mod289(float4 x) 
{ 
    return x - floor(x * (1.0 / 289.0)) * 289.0; 
}

float4 permute(float4 x) 
{ 
    return mod289(((x*34.0)+1.0)*x); 
}

float4 taylorInvSqrt(float4 r) 
{ 
    return 1.79284291400159 - 0.85373472095314 * r; 
}
float snoise(float3 v) { const float2 C = float2(1.0/6.0, 1.0/3.0) ; const float4 D = float4(0.0, 0.5, 1.0, 2.0); float3 i  = floor(v + dot(v, C.yyy) ); float3 x0 = v - i + dot(i, C.xxx) ; float3 g = step(x0.yzx, x0.xyz); float3 l = 1.0 - g; float3 i1 = min( g.xyz, l.zxy ); float3 i2 = max( g.xyz, l.zxy ); float3 x1 = x0 - i1 + C.xxx; float3 x2 = x0 - i2 + C.yyy; float3 x3 = x0 - D.yyy; i = mod289(i);  float4 p = permute( permute( permute( i.z + float4(0.0, i1.z, i2.z, 1.0 )) + i.y + float4(0.0, i1.y, i2.y, 1.0 )) + i.x + float4(0.0, i1.x, i2.x, 1.0 )); float n_ = 0.142857142857; float3 ns = n_ * D.wyz - D.xzx; float4 j = p - 49.0 * floor(p * ns.z * ns.z); float4 x_ = floor(j * ns.z); float4 y_ = floor(j - 7.0 * x_ ); float4 x = x_ * ns.x + ns.yyyy; float4 y = y_ * ns.x + ns.yyyy; float4 h = 1.0 - abs(x) - abs(y); float4 b0 = float4( x.xy, y.xy ); float4 b1 = float4( x.zw, y.zw ); float4 s0 = floor(b0)*2.0 + 1.0; float4 s1 = floor(b1)*2.0 + 1.0; float4 sh = -step(h, float4(0,0,0,0)); float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy; float4 a1 = b1.xzyw + s1.xzyw*sh.zzww; float3 p0 = float3(a0.xy,h.x); float3 p1 = float3(a0.zw,h.y); float3 p2 = float3(a1.xy,h.z); float3 p3 = float3(a1.zw,h.w); float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3))); p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w; float4 m = max(0.6 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0); m = m * m; return 42.0 * dot( m*m, float4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) ); }
// 无需 curl/multi-vortex 工具函数


// --- KERNELS ---
[numthreads(1,1,1)] 
void UpdateArgs(uint3 id : SV_DispatchThreadID)
{ 
    _Counters[_PingPong_B] = 0; 
    _IndirectArgs[1] = 0; 
}
[numthreads(THREAD_COUNT_1D,1,1)] 
void Emit(uint3 id : SV_DispatchThreadID)
{ 
    if(id.x >= _EmissionCount) return; 
    
    uint dead_count; 
    InterlockedAdd(_Counters[0], -1, dead_count); 
    if(dead_count < 1)
    {
        InterlockedAdd(_Counters[0], 1); 
        return;
    } 
    
    uint p_idx = _DeadPool[dead_count-1]; 
    Emitter emitter = _Emitters[_EmitterIndex]; 
    
    // 分配全局唯一ID
    uint global_id;
    InterlockedAdd(_GlobalIdCounter[0], 1, global_id);
    
    Particle p; 
    // 初始化粒子属性
    p.lifetime = float4(0, lerp(_MinLifetime, _MaxLifetime, rand(id.xy + _Seeds.xy)), 0, 0); 
    p.velocity = float4(0, 0, 0, 0); 
    p.position = float4(0, 0, 0, 1); 
    p.color = float4(1, 1, 1, 1); 
    p.attributes = float4(_EmitterIndex, 0, 0, 0); // 将emitterId存储在attributes.x中
    p.globalId = global_id;  // 设置全局唯一ID
    p.padding1 = 0;
    p.padding2 = 0;
    p.padding3 = 0;
    
    // 设置发射器参数
    float3 emitter_pos = emitter.position.xyz; 
    float emitter_radius = emitter.position.w; 
    float min_speed = emitter.speedMinMax.x; 
    float max_speed = emitter.speedMinMax.y; 
    
    // 薄盘内采样（r ~ sqrt(u)）
    float u1 = rand(id.xy + _Seeds.xy * 0.37);
    float u2 = rand(id.yx + _Seeds.yz * 0.71);
    float r = sqrt(u1) * _DiskRadius;
    float theta = 6.28318530718 * u2;
    float y = (rand(id.xy + _Seeds.zx * 0.13) - 0.5) * 2.0 * _DiskHalfThickness;
    float3 pos = float3(cos(theta) * r, y, sin(theta) * r);
    p.position = float4(pos + emitter_pos, 1.0);
    // 切向初速（随半径上升并趋于平坦）
    float desiredSpeed = _FlatRotationSpeed * (1.0 - exp(-r / max(1e-3, _RotationScaleRadius)));
    float3 radialDir = normalize(float3(cos(theta), 0, sin(theta)));
    float3 tangent = float3(-radialDir.z, 0, radialDir.x);
    float3 v0 = tangent * desiredSpeed;
    // 少量噪声
    float3 noise = (float3(rand(id.xy), rand(id.yx), rand(id.xx)) - 0.5) * 0.2 * desiredSpeed;
    p.velocity = float4(v0 + noise, 0);
    p.color = emitter.color; 
    
    _Particles[p_idx] = p; 
    
    uint alive_insert_idx; 
    InterlockedAdd(_Counters[_PingPong_A], 1, alive_insert_idx); 
    _AliveIndices_A[alive_insert_idx] = p_idx; 

    // （调试写入已移除）
}
[numthreads(THREAD_COUNT_1D, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    uint total_alive_count = _Counters[_PingPong_A];
    if (id.x >= total_alive_count) return;

    uint p_idx = _AliveIndices_A[id.x];
    Particle p = _Particles[p_idx];

    // （调试初始化已移除）

    p.lifetime.x += _DeltaTime;

    if (p.lifetime.x >= p.lifetime.y)
    {
        uint dead_insert_idx;
        InterlockedAdd(_Counters[0], 1, dead_insert_idx);
        _DeadPool[dead_insert_idx] = p_idx;
    }
    else
    {
        float3 acceleration = _GlobalForce;
        if (_GalacticDiskEnabled)
        {
            float3 pos = p.position.xyz;
            float3 inPlane = float3(pos.x, 0, pos.z);
            float r = max(1e-3, length(inPlane));
            float3 radialDir = inPlane / r;
            float3 tangent = float3(-radialDir.z, 0, radialDir.x);

            // 中心引力 ~ 1/r
            float radialG = _CenterGravity / r;
            acceleration += -radialDir * radialG;
            // 拉回盘面
            acceleration += float3(0, -pos.y * _PlaneDamping, 0);

            // 目标切向速度（差速旋转）
            float desiredSpeed = _FlatRotationSpeed * (1.0 - exp(-r / max(1e-3, _RotationScaleRadius)));
            float3 vDesired = tangent * desiredSpeed;
            float r01_align = saturate(r / _DiskRadius);
            float alignFactor = _TangentialAlign * (1.0 - 0.4 * (r01_align*r01_align)); // 外缘稍减对齐
            p.velocity.xyz = lerp(p.velocity.xyz, vDesired, alignFactor);

            // 螺旋臂压缩（对数螺旋 theta = b*ln(r)+phi_k）
            float theta = atan2(pos.z, pos.x);
            float minAbsErr = 1000.0;
            float signedErr = 0.0;
            for (int k = 0; k < max(1,_SpiralArms); k++)
            {
                float phi = 6.28318530718 * (float)k / max(1,_SpiralArms);
                float target = _SpiralTightness * log(r) + phi;
                float err = theta - target;
                // wrap to [-pi, pi]
                err = err - 6.28318530718 * round(err / 6.28318530718);
                if (abs(err) < minAbsErr)
                {
                    minAbsErr = abs(err);
                    signedErr = err;
                }
            }
            float armFalloff = exp(-abs(signedErr) * 4.0) * smoothstep(1.0, 0.0, r / _DiskRadius);
            float3 normalDir = normalize(tangent * (-sign(signedErr)) + (-_SpiralTightness) * radialDir * (-sign(signedErr)));
            acceleration += normalDir * _SpiralForce * armFalloff;

            // 离心外飘：vt^2/r 与中心引力的差，边缘增强
            float vt = dot(p.velocity.xyz, tangent);
            float outAcc = max(0.0, (vt*vt - _CenterGravity) / r);
            float r01 = saturate(r / _DiskRadius);
            float edgeWeight = pow(r01, _EdgeOutflowExponent);
            acceleration += radialDir * outAcc * _EdgeOutflowStrength * edgeWeight;
        }

        // （调试加速度捕获已移除）

        p.velocity.xyz += acceleration * _DeltaTime;
        p.velocity.xyz *= (1.0 - _Drag * _DeltaTime);
        p.position.xyz += p.velocity.xyz * _DeltaTime;
        
        float life_ratio = saturate(p.lifetime.x / p.lifetime.y);
        if (_RadialColorEnabled)
        {
            float r01 = saturate(length(float3(p.position.x,0,p.position.z)) / _DiskRadius);
            float3 c = lerp(_CoreColor, _MidColor, saturate(r01*1.5));
            c = lerp(c, _OuterColor, saturate(max(0,r01-0.5)*2.0));
            p.color.rgb = c;
        }
        else if (_VelocityToColor) { float speed=length(p.velocity.xyz); float speedRatio=saturate(speed/_MaxSpeedForColor); float3 velocityColor=lerp(float3(0,0,1),float3(1,0,0),speedRatio); p.color.rgb=velocityColor; }
        else if (_ColorOverLife) { p.color.rgb = lerp(p.color.rgb, float3(1,1,0), life_ratio*0.5); }
        p.color.a = 1.0 - life_ratio;
        
        _Particles[p_idx] = p;
        
        uint alive_insert_idx;
        InterlockedAdd(_Counters[_PingPong_B], 1, alive_insert_idx);
        _AliveIndices_B[alive_insert_idx] = p_idx;
        InterlockedAdd(_IndirectArgs[1], 1);

        // （调试输出写入已移除）
    }
}