#pragma kernel UpdateArgs
#pragma kernel Emit
#pragma kernel Simulate
#pragma target 5.0

#define THREAD_COUNT_1D 256

// --- Structs ---
struct Particle 
{ 
    float4 lifetime; 
    float4 velocity; 
    float4 position; 
    float4 color; 
    float4 attributes; 
    uint globalId;        // global unique id
    uint padding1;        // padding
    uint padding2;        // padding
    uint padding3;        // padding
};

// --- Buffers ---
RWStructuredBuffer<Particle> _Particles;
RWStructuredBuffer<uint> _DeadPool;
RWStructuredBuffer<uint> _AliveIndices_A;
RWStructuredBuffer<uint> _AliveIndices_B;
RWStructuredBuffer<uint> _Counters;
RWStructuredBuffer<uint> _IndirectArgs;
RWStructuredBuffer<uint> _GlobalIdCounter;  // global id counter

// --- Uniforms ---
float _DeltaTime;
uint _PingPong_A;
uint _PingPong_B;
uint _EmissionCount;
float _MinLifetime;
float _MaxLifetime;
float _Drag;
float3 _Seeds;
float3 _GlobalForce;
bool _ColorOverLife;
bool _VelocityToColor;
float _MaxSpeedForColor;

// Spherical-only uniforms
float3 _SphereCenter;
float _SphereRadius;
float _ShellThickness;
int _SphereVelocityMode;   // 0=RadialOut,1=RadialIn,2=Tangential,3=RadialPlusSwirl
float _RadialSpeed;
float _TangentialSpeed;
float _SwirlSpeed;
float _GravityK;
float _RadialDamping;
int _SphereBoundaryMode;   // 0=None,1=SurfaceStick,2=ShellClamp
float _BoundarySpring;
float _BoundaryDamping;
bool _SphereColorByRadiusEnabled;
float3 _SphereInnerColor;
float3 _SphereMidColor;
float3 _SphereOuterColor;
float3 _BaseColor;
// Temperature
bool _TemperatureColorEnabled;
float _TemperatureC;
float3 _TempColorLow;
float3 _TempColorHigh;
// Mouse Attractor
bool _MouseAttractorEnabled;
float3 _MouseWorldPos;
float _MouseAttractorStrength;
float _MouseAttractorFalloff;
float _MouseAttractorDragBoost;
bool _EmitFromMouse;
float _MouseEmissionSpeed;
float _MouseAttractorStrengthMouseFactor;
bool _MouseParticlesIgnoreCenterGravity;
float _MouseEmitJitterSpeed;
float _MouseBornExtraDamping;
float _MouseBornMaxSpeed;
bool _AllowShellBreakToMouse;

// Ring uniforms removed

// --- Utility Functions ---
float rand(float2 co) 
{ 
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453); 
}

float3 SafeNormalize(float3 v) 
{ 
    float l = length(v); 
    if (l > 0.00001) 
    { 
        return v / l; 
    } 
    return float3(0, 1, 0); 
}

// Build stable tangent basis orthogonal to normal
void BuildOrthonormalBasis(float3 n, out float3 t, out float3 b)
{
	float3 a = (abs(n.y) < 0.999f) ? float3(0,1,0) : float3(1,0,0);
	t = normalize(cross(a, n));
	b = cross(n, t);
}

// --- Noise Functions ---
float3 mod289(float3 x) 
{ 
    return x - floor(x * (1.0 / 289.0)) * 289.0; 
}

float4 mod289(float4 x) 
{ 
    return x - floor(x * (1.0 / 289.0)) * 289.0; 
}

float4 permute(float4 x) 
{ 
    return mod289(((x*34.0)+1.0)*x); 
}

float4 taylorInvSqrt(float4 r) 
{ 
    return 1.79284291400159 - 0.85373472095314 * r; 
}
float snoise(float3 v) { const float2 C = float2(1.0/6.0, 1.0/3.0) ; const float4 D = float4(0.0, 0.5, 1.0, 2.0); float3 i  = floor(v + dot(v, C.yyy) ); float3 x0 = v - i + dot(i, C.xxx) ; float3 g = step(x0.yzx, x0.xyz); float3 l = 1.0 - g; float3 i1 = min( g.xyz, l.zxy ); float3 i2 = max( g.xyz, l.zxy ); float3 x1 = x0 - i1 + C.xxx; float3 x2 = x0 - i2 + C.yyy; float3 x3 = x0 - D.yyy; i = mod289(i);  float4 p = permute( permute( permute( i.z + float4(0.0, i1.z, i2.z, 1.0 )) + i.y + float4(0.0, i1.y, i2.y, 1.0 )) + i.x + float4(0.0, i1.x, i2.x, 1.0 )); float n_ = 0.142857142857; float3 ns = n_ * D.wyz - D.xzx; float4 j = p - 49.0 * floor(p * ns.z * ns.z); float4 x_ = floor(j * ns.z); float4 y_ = floor(j - 7.0 * x_ ); float4 x = x_ * ns.x + ns.yyyy; float4 y = y_ * ns.x + ns.yyyy; float4 h = 1.0 - abs(x) - abs(y); float4 b0 = float4( x.xy, y.xy ); float4 b1 = float4( x.zw, y.zw ); float4 s0 = floor(b0)*2.0 + 1.0; float4 s1 = floor(b1)*2.0 + 1.0; float4 sh = -step(h, float4(0,0,0,0)); float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy; float4 a1 = b1.xzyw + s1.xzyw*sh.zzww; float3 p0 = float3(a0.xy,h.x); float3 p1 = float3(a0.zw,h.y); float3 p2 = float3(a1.xy,h.z); float3 p3 = float3(a1.zw,h.w); float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3))); p0 *= norm.x; p1 *= norm.y; p2 *= norm.z; p3 *= norm.w; float4 m = max(0.6 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0); m = m * m; return 42.0 * dot( m*m, float4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) ); }
// 无需 curl/multi-vortex 工具函数


// --- KERNELS ---
[numthreads(1,1,1)] 
void UpdateArgs(uint3 id : SV_DispatchThreadID)
{ 
    _Counters[_PingPong_B] = 0; 
    _IndirectArgs[1] = 0; 
}
[numthreads(THREAD_COUNT_1D,1,1)] 
void Emit(uint3 id : SV_DispatchThreadID)
{ 
    if(id.x >= _EmissionCount) return; 
    
    uint dead_count; 
    InterlockedAdd(_Counters[0], -1, dead_count); 
    if(dead_count < 1)
    {
        InterlockedAdd(_Counters[0], 1); 
        return;
    } 
    
    uint p_idx = _DeadPool[dead_count-1]; 
    
    // 分配全局唯一ID
    uint global_id;
    InterlockedAdd(_GlobalIdCounter[0], 1, global_id);
    
    Particle p; 
    // 初始化粒子属性
    p.lifetime = float4(0, lerp(_MinLifetime, _MaxLifetime, rand(id.xy + _Seeds.xy)), 0, 0); 
    p.velocity = float4(0, 0, 0, 0); 
    p.position = float4(0, 0, 0, 1); 
    p.color = float4(1, 1, 1, 1); 
    p.attributes = float4(0, 0, 0, 0);
    p.globalId = global_id;  // 设置全局唯一ID
    p.padding1 = 0;
    p.padding2 = 0;
    p.padding3 = 0;
    
    {
        // 球壳采样
        float u1 = rand(id.xy + _Seeds.xy * 0.19);
        float u2 = rand(id.yx + _Seeds.yz * 0.61);
        float u3 = rand(id.xx + _Seeds.zx * 0.83);
        // 均匀方向
        float z = 2.0 * u1 - 1.0;
        float phi = 6.28318530718 * u2;
        float s = sqrt(max(0.0, 1.0 - z*z));
        float3 dir = float3(s * cos(phi), z, s * sin(phi));
        // 半径（仅壳体）
        float innerR = max(0.0, _SphereRadius - _ShellThickness);
        float r = lerp(innerR, _SphereRadius, u3);
        float3 pos = _SphereCenter + dir * r;
        if (_EmitFromMouse)
        {
            pos = _MouseWorldPos;
        }
        p.position = float4(pos, 1.0);
        // 初速度
        float3 t, b; BuildOrthonormalBasis(dir, t, b);
        float3 v0 = 0;
        if (_SphereVelocityMode == 0) { v0 = dir * _RadialSpeed; }
        else if (_SphereVelocityMode == 1) { v0 = (-dir) * _RadialSpeed; }
        else if (_SphereVelocityMode == 2) { v0 = t * _TangentialSpeed; }
        else { v0 = dir * _RadialSpeed + t * _SwirlSpeed; }
        if (_EmitFromMouse)
        {
            float3 rnd = float3(rand(id.xy*1.7), rand(id.yx*2.3), rand(id.xx*3.1)) - 0.5;
            float3 jitter = normalize(rnd) * _MouseEmitJitterSpeed;
            float3 vel = jitter; // 仅轻微抖动，避免外逃
            p.velocity = float4(vel, 0);
            p.attributes.w = 1.0; // 标记为鼠标粒子
        }
        else
        {
            p.velocity = float4(v0, 0);
            p.attributes.w = 0.0;
        }
        p.color = float4(_BaseColor, 1.0);
    }
    
    _Particles[p_idx] = p; 
    
    uint alive_insert_idx; 
    InterlockedAdd(_Counters[_PingPong_A], 1, alive_insert_idx); 
    _AliveIndices_A[alive_insert_idx] = p_idx; 
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    uint total_alive_count = _Counters[_PingPong_A];
    if (id.x >= total_alive_count) return;

    uint p_idx = _AliveIndices_A[id.x];
    Particle p = _Particles[p_idx];

    p.lifetime.x += _DeltaTime;

    if (p.lifetime.x >= p.lifetime.y)
    {
        uint dead_insert_idx;
        InterlockedAdd(_Counters[0], 1, dead_insert_idx);
        _DeadPool[dead_insert_idx] = p_idx;
    }
    else
    {
        float3 acceleration = _GlobalForce;
        float3 pos = p.position.xyz;
        float3 toCenter = _SphereCenter - pos;
        float dist = length(toCenter) + 1e-4;
        float3 dir = toCenter / dist;
        bool isMouse = (p.attributes.w > 0.5);
        // 中心吸引力 ~ 1/r^2（鼠标粒子可忽略）
        if (!(isMouse && _MouseParticlesIgnoreCenterGravity))
        {
            acceleration += dir * (_GravityK / (dist * dist));
        }

        // 鼠标吸引力
        if (_MouseAttractorEnabled)
        {
            float3 toMouse = _MouseWorldPos - p.position.xyz;
            float d = length(toMouse) + 1e-4;
            float3 dirM = toMouse / d;
            float baseK = _MouseAttractorStrength / pow(d, max(0.1, _MouseAttractorFalloff));
            float k = baseK * (isMouse ? _MouseAttractorStrengthMouseFactor : 1.0);
            acceleration += dirM * k;
            p.velocity.xyz *= (1.0 - (_MouseAttractorDragBoost + _MouseBornExtraDamping * (isMouse?1.0:0.0)) * _DeltaTime);
        }

        if (!isMouse)
        {
            // 径向速度阻尼（抑制穿壳与抖动）
            float radialV = dot(p.velocity.xyz, -dir); // 与半径方向同向的速度
            if (!_AllowShellBreakToMouse || !_MouseAttractorEnabled)
            {
                p.velocity.xyz -= (-dir) * radialV * _RadialDamping;
            }

            // 壳体夹回
            if (_SphereBoundaryMode == 1 && (!_AllowShellBreakToMouse || !_MouseAttractorEnabled))
            {
                float targetR = _SphereRadius;
                float offset = dist - targetR;
                acceleration += (-dir) * (offset * _BoundarySpring);
                p.velocity.xyz -= (-dir) * radialV * _BoundaryDamping;
            }
            else if (_SphereBoundaryMode == 2 && (!_AllowShellBreakToMouse || !_MouseAttractorEnabled))
            {
                float innerR = max(0.0, _SphereRadius - _ShellThickness);
                float outerR = _SphereRadius;
                float offset = 0.0;
                if (dist < innerR) offset = dist - innerR; // 负值，推向外
                else if (dist > outerR) offset = dist - outerR; // 正值，推向内
                if (offset != 0.0)
                {
                    acceleration += (-dir) * (offset * _BoundarySpring);
                    p.velocity.xyz -= (-dir) * radialV * _BoundaryDamping;
                }
            }
        }


        p.velocity.xyz += acceleration * _DeltaTime;
        // 鼠标粒子速度限制
        if (isMouse)
        {
            float sp = length(p.velocity.xyz);
            if (sp > _MouseBornMaxSpeed)
            {
                p.velocity.xyz *= (_MouseBornMaxSpeed / sp);
            }
        }
        p.velocity.xyz *= (1.0 - _Drag * _DeltaTime);
        p.position.xyz += p.velocity.xyz * _DeltaTime;
        
        float life_ratio = saturate(p.lifetime.x / p.lifetime.y);
        if (_TemperatureColorEnabled)
        {
            float t01 = saturate((_TemperatureC - 20.0) / 10.0); // 20~30 -> 0~1
            p.color.rgb = lerp(_TempColorLow, _TempColorHigh, t01);
        }
        else if (_SphereColorByRadiusEnabled)
        {
            float r01 = saturate(distance(p.position.xyz, _SphereCenter) / max(1e-4, _SphereRadius));
            float3 c = lerp(_SphereInnerColor, _SphereMidColor, saturate(r01*1.5));
            c = lerp(c, _SphereOuterColor, saturate(max(0,r01-0.5)*2.0));
            p.color.rgb = c;
        }
        else if (_VelocityToColor) { float speed=length(p.velocity.xyz); float speedRatio=saturate(speed/_MaxSpeedForColor); float3 velocityColor=lerp(float3(0,0,1),float3(1,0,0),speedRatio); p.color.rgb=velocityColor; }
        else if (_ColorOverLife) { p.color.rgb = lerp(p.color.rgb, float3(1,1,0), life_ratio*0.5); }
        p.color.a = 1.0 - life_ratio;
        
        _Particles[p_idx] = p;
        
        uint alive_insert_idx;
        InterlockedAdd(_Counters[_PingPong_B], 1, alive_insert_idx);
        _AliveIndices_B[alive_insert_idx] = p_idx;
        InterlockedAdd(_IndirectArgs[1], 1);
    }
}